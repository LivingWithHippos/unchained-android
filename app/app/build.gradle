apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

def keyPropertiesFile = rootProject.file("signingkey.properties")
def keyProperties = new Properties()
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

android {

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.github.livingwithhippos.unchained"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 21
        versionName "4.6.3-beta"
        // limit resources for a list of locales
        // resConfigs "en", "it"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString(),
                              "room.incremental"   : "true"]
            }
        }
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    signingConfigs {
        //used by circleci
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "release.pfk")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }

        /**
         * used with a local file
         * needs to be commented out otherwise circleci will try to process this, fail to find the storeFile and crash
         * this also need a signingkey.properties file in the root directory
         local {
         // windows
         // storeFile file(keyProperties['releaseStoreFile'])
         // linux
         storeFile file("/home/user/.keystore/release.pfk")
         // shared
         storePassword keyProperties['releaseStorePassword']
         keyAlias keyProperties['keyAlias']
         keyPassword keyProperties['releaseStorePassword']
         }
         */
    }

    buildTypes {

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = applicationId
                outputFileName += "-v" +
                        android.defaultConfig.versionName +
                        ".apk"

            }
        }


        debug {
            versionNameSuffix "-dev"
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
        }

        release {

            signingConfig signingConfigs.release

            debuggable false

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}
/*
tasks.register('copyPlugins', Copy) {
    description("Copy search plugins into the assets folder. Avoid for Google Play releases.")

    File rootProjectDir = file("$rootDir")
    File pluginsFolder = file(new File(rootProjectDir.getParent(), "extra_assets/plugins"))
    File assetsFolder = file("$rootDir/app/src/main/assets/search_plugins")

    from pluginsFolder
    include "*.unchained"
    into assetsFolder
}

project.afterEvaluate {
    preBuild.dependsOn copyPlugins
}

clean.dependsOn copyPlugins
clean.mustRunAfter copyPlugins
*/
dependencies {

    // def leakcanary_version = '2.4'
    def androidx_core_version = "1.5.0"
    def appcompat_version = "1.3.0"
    // def arrow_version = "0.13.2"
    def coil_version = '1.2.2'
    def constraint_layout_version = '2.0.4'
    def coroutines_version = "1.5.0"
    def flexbox_version = "3.0.0"
    def fragment_version = '1.3.5'
    def jsoup_version = '1.13.1'
    def lifecycle_version = "2.3.1"
    def material_version = '1.3.0'
    def moshi_version = '1.12.0'
    def okhttp_version = '4.9.1'
    def paging_version = '3.0.0'
    def preferences_version = '1.1.1'
    def recyclerview_version = '1.1.0'
    def retrofit_version = '2.9.0'
    def room_version = "2.3.0"
    def swipe_version = "1.1.0"
    def timber_version = "4.7.1"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_version"
    implementation "androidx.preference:preference-ktx:$preferences_version"
    implementation "androidx.recyclerview:recyclerview-selection:$recyclerview_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.google.android.flexbox:flexbox:$flexbox_version"

    // moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    //okhttp
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-dnsoverhttps:$okhttp_version"

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.nav_version"
    implementation "androidx.navigation:navigation-runtime-ktx:$rootProject.nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.nav_version"

    // room
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // material design
    implementation "com.google.android.material:material:$material_version"

    // Lifecycle stuff
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // Annotation processor
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // coil
    implementation "io.coil-kt:coil:$coil_version"

    //hilt
    implementation "com.google.dagger:hilt-android:$rootProject.hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hilt_version"

    // paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // arrow
    // implementation "io.arrow-kt:arrow-core:$arrow_version"
    // kapt "io.arrow-kt:arrow-meta:$arrow_version"

    // timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    //jsoup
    implementation "org.jsoup:jsoup:$jsoup_version"

    // leak canary
    // debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"

}

kapt {
    correctErrorTypes true
}