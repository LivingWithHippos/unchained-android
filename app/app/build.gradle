apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-parcelize'

protobuf {
    protoc {
        artifact = deps.protobuf.protoc
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

def keyPropertiesFile = rootProject.file("signingkey.properties")
def keyProperties = new Properties()
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

def apiPropertiesFile = rootProject.file("apikey.properties")
def apiProperties = new Properties()
if (apiPropertiesFile.exists()) {
    apiProperties.load(new FileInputStream(apiPropertiesFile))
}

android {

    compileSdk 33

    defaultConfig {
        applicationId "com.github.livingwithhippos.unchained"
        minSdk 22
        targetSdk 33
        versionCode 32
        versionName "4.40.2-beta"
        // limit resources for a list of locales
        // resConfigs "en", "it"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString(),
                              "room.incremental"   : "true"]
            }
        }
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    signingConfigs {
        // use local file if available or Environment variables (for CI)
        release {
            if (keyPropertiesFile.exists()) {
                // windows file path
                storeFile file(keyProperties['releaseStoreFile'])
                // linux file path
                // storeFile file("/home/user/.keystore/release.pfk")
                // shared properties
                storePassword keyProperties['releaseStorePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['releaseStorePassword']
            } else {
                storeFile file(System.getenv("KEYSTORE") ?: "release.pfk")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }

    buildTypes {

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = applicationId
                outputFileName += "-v" +
                        android.defaultConfig.versionName +
                        ".apk"

            }
        }


        debug {
            versionNameSuffix "-dev"
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug

            if (apiPropertiesFile.exists()) {
                buildConfigField("String", "COUNTLY_APP_KEY", apiProperties['COUNTLY_APP_KEY'])
                buildConfigField("String", "COUNTLY_URL", apiProperties['COUNTLY_URL'])
            } else {
                // use a random key and localhost if the env are missing
                def countlyKey = System.getenv("COUNTLY_APP_KEY") ?: "pDJz4WrY9XeBotXAaL9MYrraSwZNyDqfAPy8p38c"
                def countlyHost = System.getenv("COUNTLY_URL") ?: "http://localhost"
                buildConfigField("String", "COUNTLY_APP_KEY", "\""+countlyKey+"\"")
                buildConfigField("String", "COUNTLY_URL", "\""+countlyHost+"\"")
            }
        }

        release {

            // with the separated release/debug files this could be unnecessary now
            buildConfigField("String", "COUNTLY_APP_KEY", "\"" + "not for production" + "\"")
            buildConfigField("String", "COUNTLY_URL", "\"" + "not for production" + "\"")

            signingConfig signingConfigs.release

            debuggable false

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}
/*
tasks.register('copyPlugins', Copy) {
    description("Copy search plugins into the assets folder. Avoid for Google Play releases.")

    File rootProjectDir = file("$rootDir")
    File pluginsFolder = file(new File(rootProjectDir.getParent(), "extra_assets/plugins"))
    File assetsFolder = file("$rootDir/app/src/main/assets/search_plugins")

    from pluginsFolder
    include "*.unchained"
    into assetsFolder
}

project.afterEvaluate {
    preBuild.dependsOn copyPlugins
}

clean.dependsOn copyPlugins
clean.mustRunAfter copyPlugins
*/
dependencies {

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.reflect
    implementation deps.core_ktx
    implementation deps.app_compat
    implementation deps.constraint_layout
    implementation deps.fragment.runtime_ktx
    implementation deps.swiperefreshlayout
    implementation deps.preference_ktx
    implementation deps.recyclerview.recyclerview
    implementation deps.recyclerview.selection
    implementation deps.viewpager2

    // datastore
    // implementation deps.datastore.preferences
    implementation deps.datastore.datastore
    implementation  deps.protobuf.javalite

    implementation deps.flexbox

    // moshi
    implementation deps.moshi.runtime
    kapt deps.moshi.kapt

    // retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.moshi

    //okhttp
    implementation deps.okhttp.runtime
    implementation deps.okhttp.logging_interceptor
    implementation deps.okhttp.doh

    // navigation
    implementation deps.navigation.runtime_ktx
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx

    // room
    implementation deps.room.runtime
    implementation deps.room.ktx
    kapt deps.room.compiler

    //coroutines
    implementation deps.coroutines.android
    implementation deps.coroutines.core

    // material design
    implementation deps.material

    // Lifecycle stuff
    implementation deps.lifecycle.viewmodel_ktx
    implementation deps.lifecycle.viewmodel_savedstate
    implementation deps.lifecycle.livedata_ktx
    implementation deps.lifecycle.service
    implementation deps.lifecycle.java8

    // coil
    implementation deps.coil

    //hilt
    implementation deps.dagger.hilt_android
    kapt deps.dagger.hilt_compiler

    // paging
    implementation deps.paging_runtime

    // state-machine
    implementation deps.statemachine

    // timber
    implementation deps.timber

    //jsoup
    implementation deps.jsoup

    // work manager
    implementation deps.work.core

    // countly
    debugImplementation deps.countly

    // test
    androidTestImplementation deps.test.core_ktx
    androidTestImplementation deps.test.rules
    androidTestImplementation deps.test.espresso
    androidTestImplementation deps.test.junit
    androidTestImplementation deps.test.runner
    androidTestImplementation deps.test.truth
    testImplementation deps.junit
}

kapt {
    correctErrorTypes true
}